{"ast":null,"code":"var _jsxFileName = \"/home/niels/Documents/nielsminssen.github.io/src/containers/blogs/Blogs.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from \"react\";\nimport \"./Blog.scss\";\nimport BlogCard from \"../../components/blogCard/BlogCard\";\nimport { blogSection } from \"../../portfolio\";\nimport { Fade } from \"react-reveal\";\nimport StyleContext from \"../../contexts/StyleContext\";\nimport { useTranslation } from \"react-i18next\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Blogs() {\n  _s();\n  const {\n    t\n  } = useTranslation();\n  const {\n    isDark\n  } = useContext(StyleContext);\n  const [mediumBlogs, setMediumBlogs] = useState([]);\n  function setMediumBlogsFunction(array) {\n    setMediumBlogs(array);\n  }\n  //Medium API returns blogs' content in HTML format. Below function extracts blogs' text content within paragraph tags\n  function extractTextContent(html) {\n    return typeof html === \"string\" ? html.split(\"p>\").filter(el => !el.includes(\">\")).map(el => el.replace(\"</\", \".\").replace(\"<\", \"\")).join(\" \") : NaN;\n  }\n  useEffect(() => {\n    if (blogSection.displayMediumBlogs === \"true\") {\n      const getProfileData = () => {\n        fetch(\"/blogs.json\").then(result => {\n          if (result.ok) {\n            return result.json();\n          }\n        }).then(response => {\n          setMediumBlogsFunction(response.items);\n        }).catch(function (error) {\n          console.error(\"\".concat(error, \" (because of this error Blogs section could not be displayed. Blogs section has reverted to default)\"));\n          setMediumBlogsFunction(\"Error\");\n          blogSection.displayMediumBlogs = \"false\";\n        });\n      };\n      getProfileData();\n    }\n  }, []);\n  if (!blogSection.display) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(Fade, {\n    bottom: true,\n    duration: 1000,\n    distance: \"20px\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      id: \"blogs\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"blog-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"blog-header-text\",\n          children: t(\"blogSection.title\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: isDark ? \"dark-mode blog-subtitle\" : \"subTitle blog-subtitle\",\n          children: t(\"blogSection.subtitle\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"blog-main-div\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"blog-text-div\",\n          children: blogSection.displayMediumBlogs !== \"true\" || mediumBlogs === \"Error\" ? blogSection.blogs.map((blog, i) => {\n            return /*#__PURE__*/_jsxDEV(BlogCard, {\n              isDark: isDark,\n              blog: {\n                url: blog.url,\n                image: blog.image,\n                title: blog.title,\n                description: blog.description\n              }\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 21\n            }, this);\n          }) : mediumBlogs.map((blog, i) => {\n            return /*#__PURE__*/_jsxDEV(BlogCard, {\n              isDark: isDark,\n              blog: {\n                url: blog.link,\n                title: blog.title,\n                description: extractTextContent(blog.content)\n              }\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(Blogs, \"2OWNqcHUA0IOVfHqFxIL/YYxuLk=\", false, function () {\n  return [useTranslation];\n});\n_c = Blogs;\nvar _c;\n$RefreshReg$(_c, \"Blogs\");","map":{"version":3,"names":["React","useState","useEffect","useContext","BlogCard","blogSection","Fade","StyleContext","useTranslation","jsxDEV","_jsxDEV","Blogs","_s","t","isDark","mediumBlogs","setMediumBlogs","setMediumBlogsFunction","array","extractTextContent","html","split","filter","el","includes","map","replace","join","NaN","displayMediumBlogs","getProfileData","fetch","then","result","ok","json","response","items","catch","error","console","concat","display","bottom","duration","distance","children","className","id","fileName","_jsxFileName","lineNumber","columnNumber","blogs","blog","i","url","image","title","description","link","content","_c","$RefreshReg$"],"sources":["/home/niels/Documents/nielsminssen.github.io/src/containers/blogs/Blogs.js"],"sourcesContent":["import React, {useState, useEffect, useContext} from \"react\";\nimport \"./Blog.scss\";\nimport BlogCard from \"../../components/blogCard/BlogCard\";\nimport {blogSection} from \"../../portfolio\";\nimport {Fade} from \"react-reveal\";\nimport StyleContext from \"../../contexts/StyleContext\";\nimport { useTranslation } from \"react-i18next\";\nexport default function Blogs() {\n  const { t } = useTranslation();\n  const {isDark} = useContext(StyleContext);\n  const [mediumBlogs, setMediumBlogs] = useState([]);\n  function setMediumBlogsFunction(array) {\n    setMediumBlogs(array);\n  }\n  //Medium API returns blogs' content in HTML format. Below function extracts blogs' text content within paragraph tags\n  function extractTextContent(html) {\n    return typeof html === \"string\"\n      ? html\n          .split(\"p>\")\n          .filter(el => !el.includes(\">\"))\n          .map(el => el.replace(\"</\", \".\").replace(\"<\", \"\"))\n          .join(\" \")\n      : NaN;\n  }\n  useEffect(() => {\n    if (blogSection.displayMediumBlogs === \"true\") {\n      const getProfileData = () => {\n        fetch(\"/blogs.json\")\n          .then(result => {\n            if (result.ok) {\n              return result.json();\n            }\n          })\n          .then(response => {\n            setMediumBlogsFunction(response.items);\n          })\n          .catch(function (error) {\n            console.error(\n              `${error} (because of this error Blogs section could not be displayed. Blogs section has reverted to default)`\n            );\n            setMediumBlogsFunction(\"Error\");\n            blogSection.displayMediumBlogs = \"false\";\n          });\n      };\n      getProfileData();\n    }\n  }, []);\n  if (!blogSection.display) {\n    return null;\n  }\n  return (\n    <Fade bottom duration={1000} distance=\"20px\">\n      <div className=\"main\" id=\"blogs\">\n        <div className=\"blog-header\">\n          <h1 className=\"blog-header-text\">{t(\"blogSection.title\")}</h1>\n          <p\n            className={\n              isDark ? \"dark-mode blog-subtitle\" : \"subTitle blog-subtitle\"\n            }\n          >\n            {t(\"blogSection.subtitle\")}\n          </p>\n        </div>\n        <div className=\"blog-main-div\">\n          <div className=\"blog-text-div\">\n            {blogSection.displayMediumBlogs !== \"true\" ||\n            mediumBlogs === \"Error\"\n              ? blogSection.blogs.map((blog, i) => {\n                  return (\n                    <BlogCard\n                      key={i}\n                      isDark={isDark}\n                      blog={{\n                        url: blog.url,\n                        image: blog.image,\n                        title: blog.title,\n                        description: blog.description\n                      }}\n                    />\n                  );\n                })\n              : mediumBlogs.map((blog, i) => {\n                  return (\n                    <BlogCard\n                      key={i}\n                      isDark={isDark}\n                      blog={{\n                        url: blog.link,\n                        title: blog.title,\n                        description: extractTextContent(blog.content)\n                      }}\n                    />\n                  );\n                })}\n          </div>\n        </div>\n      </div>\n    </Fade>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}